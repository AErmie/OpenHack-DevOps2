name: POI (Point Of Interests) End-to-End

trigger:
  branches:
    include:
      - '*'
    exclude:
      - main
      - master     
  paths:
    include:
      - apis/poi/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: SensitiveVariables
  - name: imageName
    value: openhacko291ndk2acr.azurecr.io/devopsoh/api-poi:$(Build.BuildId)
  - name: azureSubscription
    value: AzInternalSubscription
  - name: containerRegistry
    value: AzContainerRegistry
  - name: repository
    value: devopsoh/api-poi
  - name: resourceGroupName
    value: openhacko291ndk2rg
  - name: appName
    value: openhacko291ndk2poi
  - name: stagingURL
    value: https://github.com/Azure-Samples/openhack-devops-proctor
    # stagingURL: 'https://$(appName)-staging.azurewebsites.net'

stages:
- stage: DependencyScanStage
  displayName: Dependency Scanning
  jobs:  
  - job: DependencyScanJob
    displayName: Run Dependency Scan
    steps:
      - task: WhiteSource Bolt@20
        displayName: Running WhiteSource Bolt Checks
        inputs:
          cwd: 'apis/poi' # Root work directory: Working directory where WhiteSource is run. Defaults to the root of the source working directory.
          advance: true # Check for advance settings.
          exclude: 'tests' # Exclude: List of exclude folders separated by space. Folder path is relative to 'Work directory' parameter.
          # extraFolders: 'ExtraFolders' # Extra folders: List of extra folders to scan separated by space. Path is relative to 'Work directory' parameter.
  - job: CreateWorkItemDependencyScan
    displayName: Create Work-Item on Dependency Scan Failure
    dependsOn: DependencyScanJob
    condition: failed()
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Dependency Scan Failure
        inputs:
          workItemType: 'Issue'
          title: 'Dependency Scan Build $(Build.BuildId) failed'
- stage: CodeCoverageStage
  displayName: Code Coverage Check
  jobs:  
  - job: CodeCoverageJob
    displayName: Run Code Coverage Check
    steps:
    - task: SonarCloudPrepare@1
      displayName: Prepare Analysis Configuration
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'adinermie'
        scannerMode: 'MSBuild'
        projectKey: 'openhacko291ndk2'
        projectName: 'OpenHack-DevOps'
  - job: CreateWorkItemCodeCoverage
    displayName: Create Work-Item on Code Coverage Failure
    dependsOn: CodeCoverageJob
    condition: failed()
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Code Coverage Failure
        inputs:
          workItemType: 'Issue'
          title: 'Code Coverage Build $(Build.BuildId) failed'
- stage: VariantAnalysisStage
  displayName: Variant Analysis
  jobs:  
  - job: VariantAnalysisJob
    displayName: Run CodeQL Variant Analysis
    steps:
    - task: Semmle@0
      inputs:
        sourceCodeDirectory: '$(Build.SourcesDirectory)'
        language: 'csharp' # Opitons: csharp [C#], cpp [C/C++ Preview], tsandjs [TypeScript + JavaScript], java
        cleanupBuildCommands: '' # The commands to run for build cleanup before building the snapshot. Multiple commands are delimited by # or new line.
        buildCommands: '' # The build commands to run when building the snapshot. Multiple commands are delimited by # or new line.
        querySuite: 'Recommended'
        timeout: '1800'
        ram: '16384'
        addProjectDirToScanningExclusionList: true
  - job: CreateWorkItemCodeCoverage
    displayName: Create Work-Item on Variant Analysis Failure
    dependsOn: VariantAnalysisJob
    condition: failed()
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Variant Analysis Failure
        inputs:
          workItemType: 'Issue'
          title: 'Variant Analysis Build $(Build.BuildId) failed'
- stage: RunUnitTestStage
  displayName: Run Unit Tests
  jobs:  
  - job: RunUnitTestJob
    displayName: Run Unit Tests
    steps:
      - task: UseDotNet@2
        displayName: Install .NET SKD 2.1.x
        inputs:
          packageType: 'sdk'
          version: '2.1.504'
      - task: DotNetCoreCLI@2
        displayName: Restore Project Dependencies
        inputs:
          command: 'restore'
          projects: 'apis/poi/poi.sln'
          feedsToUse: 'select'
      - task: DotNetCoreCLI@2
        displayName: Build Solution
        inputs:
          command: 'build'
          projects: 'apis/poi/poi.sln'
      - task: DotNetCoreCLI@2
        displayName: Execute .NET Unit Tests
        inputs:
          command: 'test'
          projects: 'apis/poi/tests/UnitTests/UnitTests.csproj'
          arguments: '--logger:trx --collect "Code coverage"'
      - task: SonarCloudAnalyze@1
        displayName: Run SonarCloud Code Analysis
      - task: SonarCloudPublish@1
        displayName: Publish SonarClode Quality Gate Results
        inputs:
          pollingTimeoutSec: '300'
  - job: CreateWorkItemUnitTest
    displayName: Create Work-Item on Unit Test Failure
    dependsOn: RunUnitTestJob
    condition: failed() # this job will only run if RunUnitTest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Unit Test Failure
        inputs:
          workItemType: 'Issue'
          title: 'Unit Test Build $(Build.BuildId) failed'
  - job: RunIntegrationTestJob
    displayName: Run Integration Tests
    steps:
      - task: UseDotNet@2
        displayName: Install .NET SKD 2.1.x
        inputs:
          packageType: 'sdk'
          version: '2.1.504'
      - task: DotNetCoreCLI@2
        displayName: Restore Project Dependencies
        inputs:
          command: 'restore'
          projects: 'apis/poi/poi.sln'
          feedsToUse: 'select'
      - task: DotNetCoreCLI@2
        displayName: Build Solution
        inputs:
          command: 'build'
          projects: 'apis/poi/poi.sln'
      - task: DotNetCoreCLI@2
        displayName: Execute .NET Unit Tests
        inputs:
          command: 'test'
          projects: 'apis/poi/tests/IntegrationTests/IntegrationTests.csproj'
          arguments: '--logger:trx --collect "Code coverage"'
  - job: CreateWorkItemIntegrationTest
    displayName: Create Work-Item on Integration Test Failure
    dependsOn: RunIntegrationTestJob
    condition: failed()
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Integration Test Failure
        inputs:
          workItemType: 'Issue'
          title: 'Integration Test Build $(Build.BuildId) failed'
- stage: BuildAndPushStage
  displayName: Build and Push Container Image
  dependsOn: RunUnitTestStage
  condition: succeeded()
  jobs:  
  - job: BuildAndPushJob
    displayName: Build and Push Container Image to Azure Container Registry (ACR)
    steps:
      - task: Docker@2
        displayName: Login to Azure Container Registry (ACR)
        inputs:
          command: login
          containerRegistry: $(containerRegistry)
      - task: Docker@2
        displayName: Build Container Image
        inputs:
          repository: $(repository)
          command: build
          Dockerfile: 'apis/poi/web/Dockerfile'
          tags: $(Build.BuildId)
          # arguments: --secret id=mysecret,src=mysecret.txt
      - task: Docker@2
        displayName: Push Container Image to Azure Container Registry (ACR)
        inputs:
          containerRegistry: |
            $(containerRegistry)
          repository: $(repository)
          command: push
          tags: |
            $(Build.BuildId)
  - job: CreateWorkItemBuildAndPush
    displayName: Create Work-Item on Build and Push Failure
    dependsOn: BuildAndPushJob
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Build and Push Failure
        inputs:
          workItemType: 'Issue'
          title: 'Build and Push $(Build.BuildId) failed'
- stage: DeployContainerStage
  displayName: Deploy Container Image
  dependsOn: BuildAndPushStage
  condition: succeeded()
  jobs:
  - job: DeployContainerJob
    displayName: Deploy Container Image to Azure Web App for Container
    steps:
      - task: AzureWebAppContainer@1
        displayName: Azure Web App for Container
        inputs:
          azureSubscription: $(azureSubscription)
          resourceGroupName: $(resourceGroupName)
          appName: $(appName)
          imageName: $(imageName)
          deployToSlotOrASE: true
          slotName: 'staging'
  - job: CreateWorkItemContainerDeploy
    displayName: Create Work-Item on Deploy Container Failure
    dependsOn: DeployContainerJob
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Deploy Container Failure
        inputs:
          workItemType: 'Issue'
          title: 'Deploy Container $(Build.BuildId) failed'
- stage: ValidateStagingDeploymentStage
  displayName: Validate Staging Deployment
  dependsOn: DeployContainerStage
  condition: succeeded()
  jobs:
  - job: URIPolling
    displayName: Polling with PowerShell
    steps:
    - task: PowerShell@2
      inputs:
        filePath: 'ADOPipelines/polling.ps1'
        arguments: '-Uri $(stagingURL) -displayUri $true'
        # workingDirectory: '/ADOPipelines'
  - job: CreateWorkItemValidateStagingDeployment
    displayName: Create Work-Item on Staging Validation Failure
    dependsOn: URIPolling
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Staging Validation Failure
        inputs:
          workItemType: 'Issue'
          title: 'Staging Validation $(Build.BuildId) failed'
- stage: LoadTestingStage
  displayName: Initiate Load Testing
  dependsOn: ValidateStagingDeploymentStage
  condition: succeeded()
  jobs:
  - job: LoadTestJob
    displayName: Load Testing
    steps:
    - task: BlazeMeter Integration@1
      inputs:
        testurl: $(stagingURL)
        apikey: $(BlazeMeter_APIKeyID)
        apisecret: $(BlazeMeter_APIKeySecret)
        # Uploadfilechk: true
        # inputallfiles: 'uploadscript'
        showtaillog: true
  - job: CreateWorkItemSwapSlot
    displayName: Create Work-Item on Slot Swapping Failure
    dependsOn: SwapSlotJob
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Slot Swapping Failure
        inputs:
          workItemType: 'Issue'
          title: 'Slot Swap $(Build.BuildId) failed'
- stage: SwapSlotStage
  displayName: Swap Staging Slot with Production
  dependsOn: LoadTestingStage
  condition: succeeded()
  jobs:
  - job: SwapSlotJob
    displayName: Swapping Slots (Staging with Production)
    steps:
    - task: AzureAppServiceManage@0
      inputs:
        azureSubscription: $(azureSubscription)
        Action: 'Swap Slots'
        WebAppName: $(appName)
        ResourceGroupName: $(resourceGroupName)
        SourceSlot: 'staging'
  - job: CreateWorkItemSwapSlot
    displayName: Create Work-Item on Slot Swapping Failure
    dependsOn: SwapSlotJob
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Slot Swapping Failure
        inputs:
          workItemType: 'Issue'
          title: 'Slot Swap $(Build.BuildId) failed'
# - stage: ReverseSwapSlotStage
#   displayName: Reverse Swap Staging Slot with Production
#   dependsOn: ValidateStagingDeploymentStage
#   condition: succeeded()
#   jobs:
#   - job: ReverseSwapSlotJob
#     displayName: Reverse Swapping Slots (Staging with Production)
#     steps:
#     - task: ManualValidation@0
#       displayName: Is Rollback Required?
#       inputs:
#         # notifyUsers: 'usr'
#         instructions: 'Confirm if rollback is required. If required, choose "Resume", if not, choose "Reject".'
#   - job: ExecuteRollback
#     displayName: Walmart Rollback
#     dependsOn: ReverseSwapSlotJob
#     condition: succeeded()
#     steps:
#     - task: AzureAppServiceManage@0
#       displayName: Execute rollback
#       inputs:
#         azureSubscription: $(azureSubscription)
#         Action: 'Swap Slots'
#         WebAppName: $(appName)
#         ResourceGroupName: $(resourceGroupName)
#         SourceSlot: 'production'
#   - job: CreateWorkItemReverseSwapSlot
#     displayName: Create Work-Item on Reverse Slot Swapping Failure
#     dependsOn: ReverseSwapSlotJob
#     condition: failed() # this job will only run if rununittest fails
#     steps:
#       - task: CreateWorkItem@1
#         displayName: Create Work-Item on Reverse Slot Swapping Failure
#         inputs:
#           workItemType: 'Issue'
#           title: 'Reverse Slot Swap $(Build.BuildId) failed'