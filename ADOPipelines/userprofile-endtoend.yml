name: USERPROFILE End-to-End

trigger:
  branches:
    include:
      - '*'
    exclude:
      - main
      - master     
  paths:
    include:
      - apis/userprofile/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: openhacko291ndk2acr.azurecr.io/devopsoh/api-userprofile:$(Build.BuildId)
  azureSubscription: AzInternalSubscription
  # To ignore SSL error uncomment the following variable
  # VSTS_ARM_REST_IGNORE_SSL_ERRORS: true 
  containerRegistry: AzContainerRegistry
  repository: devopsoh/api-userprofile
  resourceGroupName: 'openhacko291ndk2rg'
  appName: 'openhacko291ndk2userprofile'
  # stagingURL: 'https://$(appName)-staging.azurewebsites.net'
  stagingURL: 'https://github.com/Azure-Samples/openhack-devops-proctor' # Valid/pass test URL  

stages:
- stage: RunUnitTestStage
  displayName: Run Unit Tests
  jobs:  
  - job: RunUnitTestJob
    displayName: Run Unit Tests
    steps:
      - task: Maven@3
        displayName: 'BuildÂ USER-JAVA'
        inputs:
          mavenPomFile: 'apis/user-java/pom.xml'
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
      - task: Maven@3
        displayName: 'Execute JAVA Unit Tests'
        inputs:
          mavenPomFile: 'apis/user-java/pom.xml'
          goals: 'test'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
  - job: CreateWorkItemUnitTest
    displayName: Create Work-Item on Unit Test Failure
    dependsOn: RunUnitTestJob
    condition: failed() # this job will only run if RunUnitTest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Unit Test Failure
        inputs:
          workItemType: 'Issue'
          title: 'Unit Test Build $(Build.BuildId) failed'
- stage: BuildAndPushStage
  displayName: Build and Push Container Image
  dependsOn: RunUnitTestStage
  condition: succeeded()
  jobs:  
  - job: BuildAndPushJob
    displayName: Build and Push Container Image to Azure Container Registry (ACR)
    steps:
      - task: Docker@2
        displayName: Login to Azure Container Registry (ACR)
        inputs:
          command: login
          containerRegistry: $(containerRegistry)
      - task: Docker@2
        displayName: Build Container Image
        inputs:
          repository: $(repository)
          command: build
          Dockerfile: 'apis/user-java/Dockerfile'
          tags: $(Build.BuildId)
          # arguments: --secret id=mysecret,src=mysecret.txt
      - task: Docker@2
        displayName: Push Container Image to Azure Container Registry (ACR)
        inputs:
          containerRegistry: |
            $(containerRegistry)
          repository: $(repository)
          command: push
          tags: |
            $(Build.BuildId)
  - job: CreateWorkItem
    displayName: Create Work-Item on Build and Push Failure
    dependsOn: BuildAndPushJob
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Build and Push Failure
        inputs:
          workItemType: 'Issue'
          title: 'Build and Push $(Build.BuildId) failed'
- stage: DeployContainerStage
  displayName: Deploy Container Image
  dependsOn: BuildAndPushStage
  condition: succeeded()
  jobs:
  - job: DeployContainerJob
    displayName: Deploy Container Image to Azure Web App for Container
    steps:
      - task: AzureWebAppContainer@1
        displayName: Azure Web App for Container
        inputs:
          azureSubscription: $(azureSubscription)
          resourceGroupName: $(resourceGroupName)
          appName: $(appName)
          imageName: $(imageName)
          deployToSlotOrASE: true
          slotName: 'staging'
  - job: CreateWorkItemContainerDeploy
    displayName: Create Work-Item on Deploy Container Failure
    dependsOn: DeployContainerJob
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Deploy Container Failure
        inputs:
          workItemType: 'Issue'
          title: 'Deploy Container $(Build.BuildId) failed'
- stage: ValidateStagingDeploymentStage
  displayName: Validate Staging Deployment
  dependsOn: DeployContainerStage
  condition: succeeded()
  jobs:
  - job: URIPolling
    displayName: Polling with PowerShell
    steps:
    - task: PowerShell@2
      inputs:
        filePath: 'ADOPipelines/polling.ps1'
        arguments: '-Uri $(stagingURL) -displayUri $true'
        # workingDirectory: '/ADOPipelines'
  - job: CreateWorkItemValidateStagingDeployment
    displayName: Create Work-Item on Staging Validation Failure
    dependsOn: URIPolling
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Staging Validation Failure
        inputs:
          workItemType: 'Issue'
          title: 'Staging Validation $(Build.BuildId) failed'
- stage: SwapSlotStage
  displayName: Swap Staging Slot with Production
  dependsOn: ValidateStagingDeploymentStage
  condition: succeededOrFailed()
  jobs:
  - job: SwapSlotJob
    displayName: Swapping Slots (Staging with Production)
    steps:
    - task: AzureAppServiceManage@0
      inputs:
        azureSubscription: $(azureSubscription)
        Action: 'Swap Slots'
        WebAppName: $(appName)
        ResourceGroupName: $(resourceGroupName)
        SourceSlot: 'staging'
  - job: CreateWorkItemSwapSlot
    displayName: Create Work-Item on Slot Swapping Failure
    dependsOn: SwapSlotJob
    condition: failed() # this job will only run if rununittest fails
    steps:
      - task: CreateWorkItem@1
        displayName: Create Work-Item on Slot Swapping Failure
        inputs:
          workItemType: 'Issue'
          title: 'Slot Swap $(Build.BuildId) failed'
# - stage: ReverseSwapSlotStage
#   displayName: Reverse Swap Staging Slot with Production
#   dependsOn: ValidateStagingDeploymentStage
#   condition: succeeded()
#   jobs:
#   - job: ReverseSwapSlotJob
#     displayName: Reverse Swapping Slots (Staging with Production)
#     steps:
#     - task: ManualValidation@0
#       displayName: Is Rollback Required?
#       inputs:
#         # notifyUsers: 'usr'
#         instructions: 'Confirm if rollback is required. If required, choose "Resume", if not, choose "Reject".'
#   - job: ExecuteRollback
#     displayName: Walmart Rollback
#     dependsOn: ReverseSwapSlotJob
#     condition: succeeded()
#     steps:
#     - task: AzureAppServiceManage@0
#       displayName: Execute rollback
#       inputs:
#         azureSubscription: $(azureSubscription)
#         Action: 'Swap Slots'
#         WebAppName: $(appName)
#         ResourceGroupName: $(resourceGroupName)
#         SourceSlot: 'production'
#   - job: CreateWorkItemReverseSwapSlot
#     displayName: Create Work-Item on Reverse Slot Swapping Failure
#     dependsOn: ReverseSwapSlotJob
#     condition: failed() # this job will only run if rununittest fails
#     steps:
#       - task: CreateWorkItem@1
#         displayName: Create Work-Item on Reverse Slot Swapping Failure
#         inputs:
#           workItemType: 'Issue'
#           title: 'Reverse Slot Swap $(Build.BuildId) failed'